package main

import (
	"fmt"
	"log"
	"os"
	"os/exec"
	"os/signal"
	"strconv"
	"syscall"
	"time"
)

// Struktura przechowujƒÖca konfiguracjƒô monitora
type Monitor struct {
	command     string        // Komenda do uruchomienia
	logFile     string        // ≈öcie≈ºka do pliku log√≥w
	timeout     time.Duration // Jak d≈Çugo czekaƒá bez zmian w logach
	interval    time.Duration // Jak czƒôsto sprawdzaƒá
	process     *exec.Cmd     // Wska≈∫nik do uruchomionego procesu
	lastModTime time.Time     // Kiedy ostatnio zmieni≈Çy siƒô logi
	lastLogSize int64         // Ostatni rozmiar pliku log√≥w
}

// Konstruktor - tworzy nowƒÖ instancjƒô monitora
func NewMonitor(command, logFile string, timeout, interval int) *Monitor {
	return &Monitor{
		command:  command,
		logFile:  logFile,
		timeout:  time.Duration(timeout) * time.Second,
		interval: time.Duration(interval) * time.Second,
	}
}

// Pobiera informacje o pliku log√≥w (czas modyfikacji i rozmiar)
func (m *Monitor) getLogInfo() (time.Time, int64, error) {
	info, err := os.Stat(m.logFile)
	if err != nil {
		return time.Time{}, 0, err
	}
	return info.ModTime(), info.Size(), nil
}

// Sprawdza czy w logach pojawi≈Çy siƒô nowe wpisy
func (m *Monitor) checkLogs() (bool, error) {
	modTime, size, err := m.getLogInfo()
	if err != nil {
		return false, fmt.Errorf("nie mo≈ºna odczytaƒá pliku log√≥w: %v", err)
	}

	// Pierwsza iteracja - zapisz poczƒÖtkowy stan
	if m.lastModTime.IsZero() {
		m.lastModTime = modTime
		m.lastLogSize = size
		fmt.Printf("PoczƒÖtkowy stan log√≥w: rozmiar %d bajt√≥w\n", size)
		return true, nil
	}

	// Sprawd≈∫ czy plik ur√≥s≈Ç (nowe logi)
	if size > m.lastLogSize {
		fmt.Printf("Nowe logi: rozmiar %d -> %d bajt√≥w (+%d)\n", 
			m.lastLogSize, size, size-m.lastLogSize)
		m.lastModTime = time.Now()
		m.lastLogSize = size
		return true, nil
	}

	// Sprawd≈∫ czy plik siƒô zmieni≈Ç (mo≈ºe zosta≈Ç przepisany)
	if modTime.After(m.lastModTime) {
		fmt.Printf("Plik log√≥w zaktualizowany: %s\n", modTime.Format("15:04:05"))
		m.lastModTime = modTime
		m.lastLogSize = size
		return true, nil
	}

	// Sprawd≈∫ czy minƒÖ≈Ç timeout bez zmian
	timeSinceLastChange := time.Since(m.lastModTime)
	if timeSinceLastChange > m.timeout {
		fmt.Printf("TIMEOUT! Brak zmian w logach przez %v (limit: %v)\n", 
			timeSinceLastChange.Round(time.Second), m.timeout)
		return false, nil
	}

	// Pokazuj co jaki≈õ czas status oczekiwania
	if int(timeSinceLastChange.Seconds())%30 == 0 && timeSinceLastChange > 30*time.Second {
		fmt.Printf("Oczekiwanie na zmiany w logach... (%v/%v)\n", 
			timeSinceLastChange.Round(time.Second), m.timeout)
	}

	return true, nil
}

// Uruchamia nowy proces
func (m *Monitor) startProcess() error {
	// Je≈õli jaki≈õ proces ju≈º dzia≈Ça, zabij go
	if m.process != nil {
		m.killProcess()
	}

	fmt.Printf("Uruchamianie: %s\n", m.command)
	
	// Tworzenie komendy do wykonania
	m.process = exec.Command("sh", "-c", m.command)
	
	// Uruchomienie procesu w tle
	err := m.process.Start()
	if err != nil {
		return fmt.Errorf("nie mo≈ºna uruchomiƒá procesu: %v", err)
	}

	fmt.Printf("Proces uruchomiony z PID: %d\n", m.process.Process.Pid)
	
	// Reset metryk - nowy proces = nowy start
	m.lastModTime = time.Now()
	
	return nil
}

// Zabija proces - najpierw grzecznie (SIGTERM), potem na si≈Çƒô (SIGKILL)
func (m *Monitor) killProcess() {
	if m.process == nil || m.process.Process == nil {
		return
	}

	pid := m.process.Process.Pid
	fmt.Printf("Zatrzymywanie procesu PID: %d\n", pid)
	
	// Wy≈õlij SIGTERM (grzeczne zamkniƒôcie)
	err := m.process.Process.Signal(syscall.SIGTERM)
	if err != nil {
		fmt.Printf("B≈ÇƒÖd wysy≈Çania SIGTERM: %v\n", err)
		return
	}
	
	// Uruchom goroutine kt√≥ra czeka na zako≈Ñczenie procesu
	done := make(chan error, 1)
	go func() {
		done <- m.process.Wait()
	}()

	// Czekaj maksymalnie 5 sekund na grzeczne zamkniƒôcie
	select {
	case err := <-done:
		if err != nil {
			fmt.Printf("Proces zako≈Ñczony z b≈Çƒôdem: %v\n", err)
		} else {
			fmt.Println("Proces zako≈Ñczony poprawnie")
		}
	case <-time.After(5 * time.Second):
		// Timeout - zabij na si≈Çƒô
		fmt.Println("Wymuszanie zako≈Ñczenia procesu (SIGKILL)...")
		m.process.Process.Kill()
		m.process.Wait()
		fmt.Println("Proces zako≈Ñczony wymuszenie")
	}
	
	m.process = nil
}

// Sprawdza czy proces jeszcze ≈ºyje
func (m *Monitor) isProcessRunning() bool {
	if m.process == nil || m.process.Process == nil {
		return false
	}

	// Wy≈õlij sygna≈Ç 0 - nie zabija procesu, tylko sprawdza czy istnieje
	err := m.process.Process.Signal(syscall.Signal(0))
	return err == nil
}

// G≈Ç√≥wna pƒôtla monitora
func (m *Monitor) Run() {
	fmt.Println("Uruchamianie monitora proces√≥w...")
	fmt.Printf("Plik log√≥w: %s\n", m.logFile)
	fmt.Printf("Timeout: %v\n", m.timeout)
	fmt.Printf("Interwa≈Ç sprawdzania: %v\n", m.interval)
	fmt.Println("Aby zatrzymaƒá monitor, naci≈õnij Ctrl+C")
	fmt.Println("--------------------------------------------------")

	// Obs≈Çuga sygna≈Ç√≥w systemowych (Ctrl+C, kill)
	sigChan := make(chan os.Signal, 1)
	signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)

	// Uruchom proces po raz pierwszy
	if err := m.startProcess(); err != nil {
		log.Fatalf("B≈ÇƒÖd uruchamiania: %v", err)
	}

	// Timer sprawdzajƒÖcy stan co okre≈õlony interwa≈Ç
	ticker := time.NewTicker(m.interval)
	defer ticker.Stop()

	// G≈Ç√≥wna pƒôtla
	for {
		select {
		case sig := <-sigChan:
			// Otrzymano sygna≈Ç zamkniƒôcia
			fmt.Printf("\nOtrzymano sygna≈Ç %v, zamykanie monitora...\n", sig)
			m.killProcess()
			fmt.Println("Monitor zako≈Ñczony")
			return

		case <-ticker.C:
			// Czas na kolejne sprawdzenie
			needRestart := false
			reason := ""

			// 1. Sprawd≈∫ czy proces jeszcze ≈ºyje
			if !m.isProcessRunning() {
				needRestart = true
				reason = "proces przesta≈Ç dzia≈Çaƒá"
			}

			// 2. Sprawd≈∫ aktywno≈õƒá w logach (tylko je≈õli proces ≈ºyje)
			if !needRestart {
				logOk, err := m.checkLogs()
				if err != nil {
					log.Printf("B≈ÇƒÖd sprawdzania log√≥w: %v", err)
					continue
				}
				if !logOk {
					needRestart = true
					reason = "brak aktywno≈õci w logach"
				}
			}

			// 3. Je≈õli trzeba, restartuj proces
			if needRestart {
				fmt.Printf("Restartowanie procesu - pow√≥d: %s\n", reason)
				m.killProcess()
				
				if err := m.startProcess(); err != nil {
					log.Printf("B≈ÇƒÖd restartu: %v", err)
					// Spr√≥buj ponownie za interwa≈Ç
					continue
				}
				
				fmt.Println("Proces zrestartowany pomy≈õlnie")
			}
		}
	}
}

// Wy≈õwietla instrukcjƒô u≈ºycia
func printUsage(progName string) {
	fmt.Printf("üîç Monitor Proces√≥w - automatyczny restart przy braku aktywno≈õci\n\n")
	fmt.Printf("U≈ºycie: %s <komenda> <plik_log√≥w> [timeout_sek] [interwa≈Ç_sek]\n\n", progName)
	fmt.Printf("Parametry:\n")
	fmt.Printf("  komenda      - aplikacja do monitorowania (w cudzys≈Çowach)\n")
	fmt.Printf("  plik_log√≥w   - ≈õcie≈ºka do pliku z logami\n")
	fmt.Printf("  timeout_sek  - restart po X sekundach bez zmian (domy≈õlnie: 60)\n")
	fmt.Printf("  interwa≈Ç_sek - sprawdzaj co X sekund (domy≈õlnie: 5)\n\n")
	fmt.Printf("Przyk≈Çady:\n")
	fmt.Printf("  %s \"python3 app.py > /tmp/app.log 2>&1\" \"/tmp/app.log\"\n", progName)
	fmt.Printf("  %s \"java -jar app.jar\" \"/var/log/app.log\" 120 10\n", progName)
	fmt.Printf("  %s \"./moj_skrypt.sh\" \"/tmp/output.log\" 30 3\n", progName)
	fmt.Printf("\nNotatki:\n")
	fmt.Printf("  ‚Ä¢ Monitor restartuje proces gdy logi nie zmieniajƒÖ siƒô przez okre≈õlony czas\n")
	fmt.Printf("  ‚Ä¢ Proces jest najpierw grzecznie zamykany (SIGTERM), potem na si≈Çƒô (SIGKILL)\n")
	fmt.Printf("  ‚Ä¢ Aby zatrzymaƒá monitor, u≈ºyj Ctrl+C\n")
}

func main() {
	// Sprawdzenie argument√≥w
	if len(os.Args) < 3 {
		printUsage(os.Args[0])
		os.Exit(1)
	}

	// Parsowanie argument√≥w
	command := os.Args[1]
	logFile := os.Args[2]

	// Domy≈õlne warto≈õci
	timeout := 60  // 60 sekund timeout
	interval := 5  // sprawdzaj co 5 sekund

	// Opcjonalne argumenty
	if len(os.Args) > 3 {
		if t, err := strconv.Atoi(os.Args[3]); err == nil && t > 0 {
			timeout = t
		} else {
			fmt.Printf("Nieprawid≈Çowy timeout '%s', u≈ºywam domy≈õlnego: %d\n", os.Args[3], timeout)
		}
	}

	if len(os.Args) > 4 {
		if i, err := strconv.Atoi(os.Args[4]); err == nil && i > 0 {
			interval = i
		} else {
			fmt.Printf("Nieprawid≈Çowy interwa≈Ç '%s', u≈ºywam domy≈õlnego: %d\n", os.Args[4], interval)
		}
	}

	// Walidacja parametr√≥w
	if timeout < interval {
		fmt.Printf("Timeout (%d) jest mniejszy ni≈º interwa≈Ç (%d), mo≈ºe to prowadziƒá do czƒôstych restart√≥w\n", timeout, interval)
	}

	// Sprawd≈∫ czy plik log√≥w istnieje (je≈õli nie, spr√≥buj go utworzyƒá)
	if _, err := os.Stat(logFile); os.IsNotExist(err) {
		fmt.Printf("Plik log√≥w nie istnieje, tworzƒô: %s\n", logFile)
		if file, err := os.Create(logFile); err != nil {
			fmt.Printf("Nie mo≈ºna utworzyƒá pliku log√≥w: %v\n", err)
			os.Exit(1)
		} else {
			file.Close()
		}
	}

	// Utworzenie i uruchomienie monitora
	monitor := NewMonitor(command, logFile, timeout, interval)
	monitor.Run()
}